#dev, test, prod 등등 버전에 맞게 config, activate, on-profile
spring:
  config:
    activate:
      on-profile: dev

  # OAUTH 설정
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-name: kakao
            client-id: e9cb9f18c757bb2e5ec1c811a9fbe5d1
            client-secret: Nk3ZroS9bxLSN9KrZ2BRrFO0KvJPYLTa
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope:
              - account_email
              - profile_nickname
              - profile_image
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# db연결
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/wms?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: gyuho
    password: Gyuho0921!

# JPA ddl-auto
# create : 기존테이블 삭제 후 다시 생성 (사용X) , create-drop : create와 같으나 종료 시점에 DROP
# update : 주어진 구조에서 db 변경            , validate    : 엔티티와 테이블이 정상 매핑되었는지만 확인   , none : 어떠한 변화도 X

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        show_sql: true



jwt:
  secret: sadfjioadghoiadkfdionsfosnaovwgoigjnoiwebvoadojsadnoijdaionjoeiqjnfqowfsad[gmsdafidsjahughdifpjdaijfidajfihasipdjfdiajfiof
  access-validity: 1000 * 60 * 60 * 24 * 14L
  refresh-validity: 1000 * 60 * 60 * 24 * 14L



